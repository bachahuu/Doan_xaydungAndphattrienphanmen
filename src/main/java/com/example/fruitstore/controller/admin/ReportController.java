package com.example.fruitstore.controller.admin;

import com.example.fruitstore.entity.ReportEntity;
import com.example.fruitstore.respository.OrderRepository;
import com.example.fruitstore.service.ReportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.web.bind.annotation.*;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import java.text.NumberFormat;

import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;

@RestController
@RequestMapping("/admin/report")
public class ReportController {

    @Autowired
    private ReportService reportService;
    @Autowired
    private OrderRepository orderRepository;

    // =================== üí∞ DOANH THU ===================
    @GetMapping("/revenue/day")
    public Double getRevenueByDay(@RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date) {
        return reportService.getRevenueByDay(date);
    }

    @GetMapping("/revenue/month")
    public Double getRevenueByMonth(@RequestParam int year, @RequestParam int month) {
        return reportService.getRevenueByMonth(year, month);
    }

    @GetMapping("/revenue/year")
    public Double getRevenueByYear(@RequestParam int year) {
        return reportService.getRevenueByYear(year);
    }

    // =================== üí∞ DOANH THU + S·∫¢N PH·∫®M B√ÅN ƒê∆Ø·ª¢C ===================
    @GetMapping("/revenue-with-products/{mode}")
    public Map<String, Object> getRevenueWithProducts(
            @PathVariable String mode,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date,
            @RequestParam(required = false) Integer month,
            @RequestParam(required = false) Integer year) {
        Map<String, Object> response = new HashMap<>();
        double totalRevenue = 0.0;
        List<Map<String, Object>> soldProducts = Collections.emptyList();

        try {
            if ("day".equals(mode)) {
                totalRevenue = reportService.getRevenueByDay(date);
            } else if ("month".equals(mode)) {
                totalRevenue = reportService.getRevenueByMonth(year, month);
            } else if ("year".equals(mode)) {
                totalRevenue = reportService.getRevenueByYear(year);
            }

            soldProducts = reportService.getSoldProducts(mode, date, month, year);

            response.put("totalRevenue", totalRevenue);
            response.put("products", soldProducts);
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI KHI X·ª¨ L√ù DOANH THU:");
            e.printStackTrace(); // ‚úÖ In l·ªói chi ti·∫øt ra console
            response.put("error", e.getMessage());
        }

        return response;
    }

    // =================== üì¶ ƒê∆†N H√ÄNG ===================
    @GetMapping("/orders/day")
    public Integer getOrderCountByDay(@RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date) {
        return reportService.getOrderCountByDay(date);
    }

    @GetMapping("/orders/month")
    public Integer getOrderCountByMonth(@RequestParam int year, @RequestParam int month) {
        return reportService.getOrderCountByMonth(year, month);
    }

    @GetMapping("/orders/year")
    public Integer getOrderCountByYear(@RequestParam int year) {
        return reportService.getOrderCountByYear(year);
    }

    // =================== üè∑Ô∏è T·ªíN KHO ===================
    @GetMapping("/inventory")
    public List<Object[]> getInventory() {
        return reportService.getInventory();
    }

    // =================== ‚¨áÔ∏è XU·∫§T EXCEL ===================
    @GetMapping("/export/excel")
    public void exportReportExcel(HttpServletResponse response) throws IOException {
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("B√°o c√°o");

        Row header = sheet.createRow(0);
        header.createCell(0).setCellValue("Ng√†y t·∫°o b√°o c√°o");
        header.createCell(1).setCellValue("T·ªïng doanh thu (VNƒê)");
        header.createCell(2).setCellValue("T·ªïng ƒë∆°n h√†ng");

        LocalDate now = LocalDate.now();
        Double revenue = reportService.getRevenueByDay(now);
        Integer orders = reportService.getOrderCountByDay(now);

        Row row = sheet.createRow(1);
        row.createCell(0).setCellValue(now.toString());
        row.createCell(1).setCellValue(revenue);
        row.createCell(2).setCellValue(orders);

        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        response.setHeader("Content-Disposition", "attachment; filename=baocao.xlsx");

        workbook.write(response.getOutputStream());
        workbook.close();
    }

    // =================== üßæ QU·∫¢N L√ù B√ÅO C√ÅO ===================
    @PostMapping("/create")
    public ReportEntity createReport(@RequestBody ReportEntity report) {
        return reportService.createReport(report);
    }

    @GetMapping("/list")
    public List<ReportEntity> getAllReports() {
        return reportService.getAllReports();
    }

    // =================== üìù XU·∫§T WORD ===================
    @GetMapping("/export/word")
    public void exportReportWord(HttpServletResponse response) throws IOException {
        List<ReportEntity> reports = reportService.getAllReports();

        response.setContentType("application/vnd.openxmlformats-officedocument.wordprocessingml.document");
        response.setHeader("Content-Disposition", "attachment; filename=baocao_chitiet.docx");

        try (org.apache.poi.xwpf.usermodel.XWPFDocument doc = new org.apache.poi.xwpf.usermodel.XWPFDocument()) {

            // Ti√™u ƒë·ªÅ ch√≠nh c·ªßa t√†i li·ªáu
            org.apache.poi.xwpf.usermodel.XWPFParagraph title = doc.createParagraph();
            org.apache.poi.xwpf.usermodel.XWPFRun run = title.createRun();
            run.setText("Chi Ti·∫øt Danh S√°ch B√°o C√°o");
            run.setBold(true);
            run.setFontSize(18);
            title.setAlignment(org.apache.poi.xwpf.usermodel.ParagraphAlignment.CENTER);
            run.addBreak(); // Th√™m m·ªôt d√≤ng ng·∫Øt

            // ƒê·ªãnh d·∫°ng ng√†y v√† ti·ªÅn t·ªá
            DateTimeFormatter fmt = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            Locale vnLocale = new Locale("vi", "VN");
            NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(vnLocale);

            // L·∫∑p qua t·ª´ng b√°o c√°o v√† in T·∫§T C·∫¢ c√°c tr∆∞·ªùng
            for (ReportEntity r : reports) {

                // Ti√™u ƒë·ªÅ cho m·ªói b√°o c√°o
                XWPFParagraph pTitle = doc.createParagraph();
                XWPFRun rTitle = pTitle.createRun();
                rTitle.setText("B√ÅO C√ÅO #" + r.getMaBaoCao());
                rTitle.setBold(true);
                rTitle.setFontSize(14);
                rTitle.setUnderline(org.apache.poi.xwpf.usermodel.UnderlinePatterns.SINGLE);

                // Chi ti·∫øt b√°o c√°o
                XWPFParagraph pDetails = doc.createParagraph();
                XWPFRun rDetails = pDetails.createRun();

                // L·∫•y t·∫•t c·∫£ c√°c tr∆∞·ªùng t·ª´ ReportEntity
                rDetails.setText("‚Ä¢ M√£ B√°o C√°o: " + r.getMaBaoCao());
                rDetails.addBreak();
                rDetails.setText("‚Ä¢ Lo·∫°i B√°o C√°o: " + (r.getLoaiBaoCao() != null ? r.getLoaiBaoCao() : "N/A"));
                rDetails.addBreak();
                rDetails.setText("‚Ä¢ Ng∆∞·ªùi L·∫≠p: " + (r.getNguoiLap() != null ? r.getNguoiLap() : "N/A"));
                rDetails.addBreak();
                rDetails.setText("‚Ä¢ Ng√†y T·∫°o: " + (r.getNgayTao() != null ? r.getNgayTao().format(fmt) : "N/A"));
                rDetails.addBreak();
                rDetails.setText("‚Ä¢ Th·ªùi Gian B√°o C√°o (Chu·ªói): "
                        + (r.getThoiGianBaoCao() != null ? r.getThoiGianBaoCao() : "N/A"));
                rDetails.addBreak();

                // ƒê·ªãnh d·∫°ng c√°c s·ªë li·ªáu
                Double doanhThu = r.getTongDoanhThu() != null ? r.getTongDoanhThu() : 0.0;
                Integer donHang = r.getTongDonHang() != null ? r.getTongDonHang() : 0;
                Integer tonKho = r.getTongSanPhamTon() != null ? r.getTongSanPhamTon() : 0;

                rDetails.setText("‚Ä¢ T·ªïng Doanh Thu: " + currencyFormat.format(doanhThu));
                rDetails.addBreak();
                rDetails.setText("‚Ä¢ T·ªïng ƒê∆°n H√†ng: " + donHang);
                rDetails.addBreak();
                rDetails.setText("‚Ä¢ T·ªïng T·ªìn Kho: " + tonKho);
                rDetails.addBreak();

                rDetails.setText("‚Ä¢ Ghi Ch√∫: "
                        + (r.getGhiChu() != null && !r.getGhiChu().isEmpty() ? r.getGhiChu() : "Kh√¥ng c√≥"));

                // Th√™m m·ªôt d√≤ng tr·ªëng ƒë·ªÉ ngƒÉn c√°ch c√°c b√°o c√°o
                doc.createParagraph();
            }

            doc.write(response.getOutputStream());
        }
    }

    // =================== ‚úèÔ∏è C·∫¨P NH·∫¨T B√ÅO C√ÅO ===================
    @PutMapping("/update/{id}")
    public ReportEntity updateReport(@PathVariable Long id, @RequestBody ReportEntity updatedReport) {
        return reportService.updateReport(id, updatedReport);
    }

    // =================== ‚ùå XO√Å B√ÅO C√ÅO ===================
    @DeleteMapping("/delete/{id}")
    public void deleteReport(@PathVariable Long id) {
        reportService.deleteReport(id);
    }
}
